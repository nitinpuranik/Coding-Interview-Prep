v = [1:1:10] creates a row array from 1 to 10, spaced 1 unit apart.
Row matrix: [2 3 4 5] ; Column matrix: [2;3;4;5]
eye(10) ; A 10 x 10 identity matrix
zeros(10,3) ; A 10 x 3 zero matrix
rand(3) : A random 3 x 3 matrix, with entries less than 1.
randi([0,2],3,4) ; 3 x 4 matrix with random integer values between 0 and 2
randn(1,7) ; normal random variables
diag([-1,2,3]) : Diagonal matrix with the given elements in the diagonal.
A(3,2) : Access the element in the 3rd row, 2nd column. Output is a scalar.
A([2,3],2) : Access rows 2 and 3, column 2. Output is a vector.
A(:,2:end) : Access all columns starting from column 2 to the end.
A(2:4,2) : Access rows 2 through 4, column 2. Note the difference between this and the previous statement.
A(1:4,2) : If the matrix is 4x4, this will give the entire column 2.
A(:,2) : Equivalent to the above. Get the entire column.
size(A) : Returns a row vector containing [row, col]. size(A,1) and size(A,2) return the dimension along row and column respectively.
X = [ones(size(X,1),1) X] : This adds a column of ones to the existing matrix X.
plot(x,y), xlabel('string'), ylabel('string'), legend('string1', 'string2'), title('string'). To plot two overlapping graphs, use "hold on" between two function calls. Legend maps strings to plots in order. To save a plot, print -dpng 'myplot.png'. Use 'close' to close the plot. To have multiple non-overlapping plots, use figure(1); plot(t,y1); figure(2); plot(t,y2). If you need to have the two plots side by side, use the following sequence of commands: subplot(1,2,1);plot(t,y1);subplot(1,2,2);plot(t,y2). subplot(1,2,1) creates a 1x2 grid, not sure what that means. Then plot(t,y1) puts in the y1 curve in that plot.
plot(x,y,'rx','MarkerSize',10); rx stands for red cross marks.
axis([xstart xend ystart yend]) command to change the axis scaling.
Concatenate two matrices : C = [A,B] or [A;B] for row and col concat, respectively.
Concatenate matrix and vector: You can only concat along similar rows or columns. 3 x 2 and 3 x 1 can only be row concatenated. 3 x 3 and 1 x 3 can only be column concatenated.
To get a vector of numbers between 1 through K permuted randomly, randvec = randperm(K);
To do elementwise multiplication between two matrices, A.*B. Similarly for other elementwise operations.
log(A), exp(A), abs(A) for absolute, -v, max(A), [value, index] = max(A) gives the maximum value and its index in a vector A.
sum(A), prod(A), floor(A), ceil(A). Note: These are for vectors. For matrices, use sum(A,1) or sum(A,2) for columnwise and rowwise operations respectively.
A = |8 1 6|
    |3 5 7|
    |4 9 2|
max(A, [], 1) = 8 9 7 % Gives the maximum along each column.
max(A, [], 2) = 8 7 9 % Gives the maximum along each row.
[val1, val2] = max(A, [], 2). val1 = [8;7;9], val2 = [1;3;2] will give the indices. If you only care about indices and don't care about val1, use [~,val2].
max(A) = 8 9 7 % Default is along the column.
To convert a handful of matrices into one long vector, use mat_vec = [A(:);B(:);C(:)];
Turn the above matrix A into a vector with B = A(:). Now type in max(B) to get the maximum element of the vector A.
To revert back the stretched out vector into a matrix again, use A = reshape(B(1:9),3,3); 1:9 recovers entries 1 through 9 from vector B and reformats it into a 3x3 matrix.
To build a collection containing words, you need to create a "cell array". A cell array is a normal array, except that its elements can also be strings. You index into a cell array using curly braces, i.e., wordlist{1}. To get the number of words in a cell array of words, use length(wordlist).
strcmp(str1,str2) returns 1 if str1 is equal to str2.

Repmat usage:
Suppose A is a row matrix of 1:5. A = [1 2 3 4 5]. So A is a 1 x 5 matrix.
Suppose you need a matrix B that is three rows, where each row is an A. So B is a 3 x 5 matrix.
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
B = repmat(A,M,N); Now size of B will be (M * number of rows of A) x (N * number of columns of A);
M * A_rows = 3 ; N * A_cols = 5 => M * 1 = 3 ; N * 5 = 5. So M = 3, N = 1.
B = repmat(A,3,1);

Matlab commands:
clc : clear command window.
clear : clear the variable window.
To add a comment line, add % <comment>.
clf: clear the plotted figure.

Functions:
function y = SquareThisNumber(x)
  y = x^2;
end

Save this in a separate file and call this from the Matlab prompt.
>> SquareThisNumber(5)
If Matlab can't link to this function, provide the path to the function file using addpath('location'), or simply cd to the location.

Logical operations:
a = 3;
r = a > 3. r will take on the value 1 if true, 0 if false.
r = a > 3 & a < 10.
Operators: >, <, &, |, >=, <=, ==, ~=, ~.

Conditional and looping operations:
if
  // Your code
else
  // Your code
end
for n = 1:6
  y(n+1) = y(n) - 0.1*y(n)
end

while n < 2000
  n = n + 1
end

lambda_vec = [0 0.001 0.003 0.01 0.03 0.1 0.3 1 3 10]';
// To iterate through this vector, use the below snippet:
for i = 1:length(lambda_vec)
  // Your code.
end