Git has three main states that your files can reside in: committed, modified and staged.
When you clone a remote repository, you're getting a mirrored repository called the git directory on your local computer. You check out a version of the project from your local git directory into a workspace. You then make modifications to the project in the workspace, stage the changes in the staging area (a file, generally contained in your Git directory, that stores information about what will go into your next commit. It’s sometimes referred to as the “index”) and then commit the staged files into your local git directory. You can then push it back to the remote repository if you so desire.
Your git configuration is stored at C:\Users\nitinp\.gitconfig
Remember: A local branch tracks a remote-tracking branch. A remote-tracking branch (which is still locally housed) tracks a branch in the remote repository.

Git Commands:
To clone a project: git clone https://github.com/libgit2/libgit2 <optional directory name> 
To start tracking files that are not tracked: git add *.c ; git add LICENSE ; git commit -m 'initial project version' (Chapter 2.1)
To check your gitconfig: git config --list
To get a listing of all files changed: git status ; git status -s for less verbosity.
To get a diff of files staged: git diff --staged or --cached ; Without the --staged parameter, you'll get a diff of modified but unstaged files.
To revert a file to the HEAD revision: git reset HEAD <file>. To revert all staged and unstaged files: git reset --hard. To hard reset to a particular version, git reset --hard <SHA256 of the commit>
To revert an unstaged file: git checkout -- <filename>. To revert all unstaged files: git checkout -- .
To add modified files for staging interactively: git add -p
To stage automatically before committing: git commit -a -m 'commit files automatically staged.'
To create a new branch 'testing': Navigate to root directory and: git branch testing. This creates the testing branch but doesn't switch to that branch.
To switch to the new branch testing: git checkout testing. To create and switch to a new branch at the same time: git checkout -b <newbranch>
To merge the branch 'hotfix' into the mainline branch 'master', switch to the master branch and then merge: git checkout master; git merge hotfix
Once hotfix branch is merged with master, you no longer need the hotfix branch. Delete it: git branch -d hotfix
To get a listing of all your branches: git branch (In the listing, the entry with the asterisk is the one you are currently in, i.e., to which the HEAD points.)
To get a listing of the remote-tracking branches: git branch -r
If the remote repository has multiple branches, you download all the branches when you clone the repository. See all these branches with the command 'git branch -a'.
After you fork a project like memcached, to track the master branch of the original memcached project and keep your fork up-to-date: git remote add --track master upstream https://github.com/memcached/memcached.git. Now you can fetch the original repo with 'git fetch upstream' and then merge to your local branch and push to your forked repo.
To squash/rebase the last three commits: git rebase -i HEAD~3. This will bring up an editor. Pick the commit you want to retain by changing the remaining commit prefixes from 'pick' to 'squash'. See https://www.gun.io/blog/how-to-github-fork-branch-and-pull-request for details.
To force push to remote repo, git push origin +selfstudy
To remove unwanted files, do a dry run with git clean -n. If all looks ok, then clean up with git clean -f.
git add -A: Stages all files. git add .: stages new and modified files but not deleted. git add -u: stages modified and deleted but not new.
git rm --cached <file> to unstage staged files.

Git log command variants:
For more options: https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History
To get a listing of all past commits: git log
To get the last 5 commits: git log -5
To get a list of last 5 entries in single line entries only consisting of partial checksum and commit message: git log --oneline -5
To get the same as above but with full checksum: git log --pretty=oneline -5
To get a listing of last two entries with their respective diffs: git log -p -2. See below for notes on how to read it.
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'  <- This line means the code below starts at line 5, and 7 lines are displayed for both a and b files. It means there have been no insertions or deletions. Only line changes.
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit <- This line means the code below starts at line 18 and 8 lines are displayed for file a and 3 lines for file b, thereby indicating that 5 lines have been deleted moving from a to b.
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file <- Don't worry about this line. I think git has added this message.
To get just a summary of the changes without dumping the actual diff: git log --stat
To get the details on a single commit: git log <checksum> -1. Add additional parameters like -p, -stat and so on. If you skip -1, then you get a history starting from that commit going back in time.

Remote Repositories:
When you run git clone <url>, you are pulling from the remote repository into your local machine. A shortname called 'origin' is created for you by default. This shortname is the handle to the URL to push and pull data. You can create new shortnames yourself. For example: git remote add newrepo https://github.com/paulboone/ticgit. Now you can refer to the remote URL using the string 'newrepo', besides 'origin'.

----------------
Git Internals  |
----------------
What happens when you git commit?
When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged. This object also contains the author’s name and email, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.

Git stores three kinds of objects: commit object, tree object and blob objects.
git add README test.rb LICENSE
git commit -m 'The initial commit of my project'
These commands above create three blob objects, one each for each of the three files. It also creates a tree object which is a representation of the directory structure containing the above three files. Finally a commit object gets created that contains a pointer to this tree. For a picture, see https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell
Every commit object has a pointer to the previous commit, i.e., the parent commit.

The .git directory and its contents: (This hidden directory comes to life when you clone or create a new git repository)
- description: Used only by the GitWeb program, so don't worry about it.
- config: Contains your project specific configuration options.
- info: Contains a global exclude file for ignored patterns that you don't want git to track.
- hooks: Contains your client or server side hook scripts, discussed more in Git Hooks.
Apart from these above objects, the below objects are the central core of Git.
- HEAD: Points to the branch that you've currently checked out.
- index files: This is where your staging area information is stored.
- objects: The directory that stores all the contents for your database.
- refs: Stores pointers to commit objects in the above database.

Start here: https://git-scm.com/book/en/v2/Git-Internals-Git-References

Questions:
What is git collapse/git squash?
Learn to use git push/git pull/git fetch efficiently.
Learn to get the diffs between two commits efficiently.